import time
import copy
import math
import Adafruit_PCA9685

import numpy as np
import picamera as PC

from smbus2 import SMBus
from serial import Serial

import rospy
from std_msgs.msg import String

# =============================
# RIGHT LEG JOINTS
# 0 Right Ankle (roll)
# 1 Right Lower Leg
# 2 Right Knee
# 3 Right Middle Leg (trocado)
# 4 Right Upper Leg
# 5 Right Hip (roll)

# LEFT LEG JOINTS
# 6 Left Ankle (roll)
# 7 Left Lower Leg
# 8 Left Knee
# 9 Left Middle Leg
# 10 Left Upper Leg
# 11 Left Hip (roll)
# =============================

class action:
    def __init__(self, frames):
        self.numServos = 12
        self.numFrames = len(frames)
        self.frames = copy.deepcopy(frames)

        # can optimize perhaps
        # the calibration matrix is nothing more than the vector of the offsets of each servo
        new__calibration = [1300, 1100, 800, -7800, 1400, 300, 700, 3600, 1600, 300, 600, 1800]
        # the old calibration matrix is used to preserve the size of the interval between the offset and the maximum and minimum values
        # so we can use that to create new max and min values through the new offset
        old__calibration = [
            [8460 , -235 , -8865],
            [1785 , 83   ,  -943],
            [1600 , 421  ,  -578],
            [-1500, 1684 ,   724],
            [1900 , 124  , -1066],
            [0    , -861 , -1500],

            [9068 , 402  , -8800],
            [-700 , -1550, -1270],
            [1200 , 707  ,   -14],
            [-1500, 1656 ,  1021],
            [1900 , 1195 ,   740],
            [0    , -401 ,  -700]
        ]

        # this section does exactly what was described above
        self.calibration = [ [new__calibration[row] - (old__calibration[row][1] - old__calibration[row][0]), new__calibration[row], new__calibration[row] + (old__calibration[row][2] - old__calibration[row][1])] for row in range(len(old__calibration)) ]

        for f in range(len(frames)):            # for every frame
            for s in range(12):                 # for every servo
                if s >= 6:
                    self.frames[f][s] *= -1     # if servo is from the left side then invert the angle

        self.index = 0

        # calibrate in the initialization
        for f in range(self.numFrames):
            for s in range(self.numFrames):
                self.frames[f][s] = correctJointAngle(self.frames[f][s], s)

    def map(self, x, a, b, c, d):
        return (x - a) * (d - c) / (b - a) + c

    # Device is a Adafruit_PCA9685
    def setServoPos(self, device):
        for servo in range(self.numServos):
            device.set_pwm(servo, 0, int(self.map(self.getFrame()[servo], -4500, 4500, 204.8, 409.6)))

    # Correct the angles using a calibration matrix
    def correctJointAngle(angle, servo):
        if angle > 0:
            return self.map(angle, 0, 4500, 0 + self.calibration[servo][1], 4500 + self.calibration[servo][2])
        else:
            return self.map(angle, -4500, 0, -4500 + self.calibration[servo][0], 0 + self.calibration[servo][1])

    def getFrame(self):
        return self.frames[self.index]

    # Play the animation on the device
    def play(self, device):
        # for f in range(self.numFrames):
        #     for s in range(self.numServos):
        #         self.frames[f][s] = correctJointAngle(self.frames[f][s], s)

        while self.index < self.numFrames:
            self.setServoPos(device)
            self.index += 1
            time.sleep(20e-3)

        self.index = 0

class rofi:
    def __init__(self):
        self.name = "rofi"

        # Creates the adafruit device
        self.device = Adafruit_PCA9685.PCA9685()
        self.device.set_pwm_freq(50)

        # Creates the BUS interface
        self.bus = SMBus(1)

        # Sets the accelerometer address for the i2c
        self.accelerometer = 0x53

        self.bus.write_byte_data(self.accelerometer, 0x2D, 0x08)
        self.bus.write_byte_data(self.accelerometer, 0x31, 0x0B)
        self.bus.write_byte_data(self.accelerometer, 0x2C, 0x09)

        # Creates the serial communication
        self.serial = Serial('/dev/ttyACM0')

        # Declare actions for the animations
        # ================================== #

        self.STEP = action([
            [  707, -2393,     0,     0, -3100,  1800, -1800,     0,   800,     0,     0, -2300 ],
            [ 1990, -2130,     0,     0, -3100,  2664, -2578,     0,   800,     0,     0, -2300 ],
            [ 2497, -2234, -2771,  2867,  1248,  2847, -2604,     0,   800,     0,  -573, -1917 ],
            [ 2812, -2367, -5772,  5915,  5980,  2894, -2500,     0,   784,     0, -1190, -1507 ],
            [ 2618, -2109, -5499,  5068,  5789,  2839, -2500,     0,   634,     0, -1094, -1581 ],
            [ 2425, -1852, -5226,  4222,  5598,  2785, -2500,     0,   484,     0,  -999, -1655 ],
            [ 2232, -1594, -4953,  3376,  5407,  2730, -2500,     0,   334,     0,  -903, -1729 ],
            [ 2039, -1336, -4680,  2529,  5216,  2676, -2500,     0,   184,     0,  -808, -1803 ],
            [ 1845, -1078, -4407,  1683,  5025,  2621, -2500,     0,    34,     0,  -712, -1877 ],
            [ 1652,  -821, -4134,   836,  4834,  2566, -2500,     0,  -116,     0,  -617, -1951 ],
            [ 1459,  -563, -3861,    -9,  4642,  2512, -2500,     0,  -266,     0,  -521, -2026 ],
            [ 1370, -1976, -2600,     0,  1551,  2064, -2574,     0,  1400,     0, -4043, -1589 ],
            [ 1113,  -472, -2600,     0,  4383,  1381, -2074,     0,  1400,     0, -1100, -1396 ],
            [  462,  -482, -2620,     0,  4047,  1008, -1567,     0,  1416,     0, -1115, -1316 ],
            [ -188,  -493, -2640,     0,  3711,   635, -1060,     0,  1431,     0, -1129, -1237 ],
            [ -839,  -503, -2659,     0,  3375,   262,  -553,     0,  1446,     0, -1143, -1158 ],
            [-1118,  -402, -1955,     0,  2643,  -308,  -231,  -488,  1153,     0, -1545,  -544 ],
            [-1324,  -280, -1123,     0,  1845,  -909,    52, -1063,   805,     0, -2014,   163 ],
            [-1530,  -159,  -291,     0,  1047, -1510,   335, -1638,   457,     0, -2483,   871 ],
            [-1735,   -37,   539,     0,   249, -2112,   619, -2213,   108,     0, -2953,  1578 ],
            [-2306,     0,   800,     0,     0, -2300,  1541, -2222,     0,     0, -3100,  2362 ],
            [-2643,     0,   800,     0,  -337, -2075,  2371, -2175, -1630,  1686,  -542,  2828 ],
            [-2531,     0,   800,     0, -1011, -1625,  2731, -2345, -4891,  5059,  4573,  2884 ],
            [-2500,     0,   687,     0, -1128, -1555,  2686, -2199, -5595,  5365,  5856,  2859 ],
            [-2500,     0,   537,     0, -1032, -1629,  2493, -1942, -5322,  4518,  5665,  2804 ],
            [-2500,     0,   387,     0,  -937, -1703,  2299, -1684, -5049,  3672,  5474,  2749 ],
            [-2500,     0,   236,     0,  -841, -1777,  2106, -1426, -4776,  2825,  5283,  2695 ],
            [-2500,     0,    86,     0,  -746, -1851,  1913, -1169, -4503,  1979,  5092,  2640 ],
            [-2500,     0,   -63,     0,  -650, -1926,  1720,  -911, -4229,  1132,  4900,  2585 ],
            [-2500,     0,  -213,     0,  -554, -2000,  1526,  -653, -3956,   286,  4709,  2531 ],
            [-2555,     0,   635,     0, -2536, -1798,  1397, -1359, -3139,   -89,  2838,  2279 ],
            [-2246,     0,  1400,     0, -2011, -1458,  1215,  -937, -2600,     0,  3518,  1605 ],
            [-1745,     0,  1410,     0, -1110, -1344,   690,  -479, -2613,     0,  4164,  1138 ],
            [-1237,     0,  1426,     0, -1124, -1265,    39,  -489, -2633,     0,  3828,   765 ],
            [ -730,     0,  1441,     0, -1138, -1186,  -611,  -500, -2652,     0,  3492,   392 ],
            [ -330,  -287,  1275,     0, -1380,  -792, -1046,  -444, -2246,     0,  2922,   -98 ],
            [  -46,  -862,   927,     0, -1850,   -84, -1252,  -323, -1415,     0,  2124,  -699 ],
            [  236, -1437,   578,     0, -2319,   623, -1458,  -201,  -583,     0,  1326, -1300 ],
            [  520, -2012,   230,     0, -2788,  1331, -1663,   -80,   248,     0,   528, -1901 ],
        ])

        self.LOOK_DOWN = action([
            [    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ],
            [    0,     0,    70,  -417,     6,     0,     0,     0,     0,  -411,     6,     0 ],
            [    0,     0,   141,  -835,    13,     0,     0,     0,     0,  -822,    13,     0 ],
            [    0,     0,   212, -1253,    20,     0,     0,     0,     0, -1233,    20,     0 ],
            [    0,     0,   282, -1671,    26,     0,     0,     0,     0, -1644,    26,     0 ],
            [    0,     0,   353, -2089,    33,     0,     0,     0,     0, -2056,    33,     0 ],
            [    0,     0,   424, -2507,    40,     0,     0,     0,     0, -2467,    40,     0 ],
            [    0,     0,   494, -2925,    47,     0,     0,     0,     0, -2878,    47,     0 ],
            [    0,     0,   565, -3343,    53,     0,     0,     0,     0, -3289,    53,     0 ],
            [    0,     0,   636, -3761,    60,     0,     0,     0,     0, -3701,    60,     0 ],
            [    0,     0,   706, -4179,    67,     0,     0,     0,     0, -4112,    67,     0 ],
            [    0,   306,  1091, -4179,    67,     0,     0,   303,   458, -4112,    67,     0 ],
            [    0,   613,  1475, -4179,    67,     0,     0,   606,   917, -4112,    67,     0 ],
            [    0,   920,  1859, -4179,    67,     0,     0,   910,  1376, -4112,    67,     0 ],
            [    0,  1226,  2243, -4179,    67,     0,     0,  1213,  1835, -4112,    67,     0 ],
            [    0,  1533,  2628, -4179,    67,     0,     0,  1516,  2293, -4112,    67,     0 ],
            [    0,  1840,  3012, -4179,    67,     0,     0,  1820,  2752, -4112,    67,     0 ],
            [    0,  2147,  3396, -4179,    67,     0,     0,  2123,  3211, -4112,    67,     0 ],
            [    0,  2453,  3780, -4179,    67,     0,     0,  2426,  3670, -4112,    67,     0 ],
            [    0,  2760,  4165, -4179,    67,     0,     0,  2730,  4128, -4112,    67,     0 ],
            [    0,  3067,  4549, -4179,    67,     0,     0,  3033,  4587, -4112,    67,     0 ],
            [    0,  2760,  4094, -3761,    60,     0,     0,  2730,  4128, -3701,    60,     0 ],
            [    0,  2453,  3639, -3343,    53,     0,     0,  2426,  3670, -3289,    53,     0 ],
            [    0,  2147,  3184, -2925,    47,     0,     0,  2123,  3211, -2878,    47,     0 ],
            [    0,  1840,  2729, -2507,    40,     0,     0,  1820,  2752, -2467,    40,     0 ],
            [    0,  1533,  2274, -2089,    33,     0,     0,  1516,  2293, -2056,    33,     0 ],
            [    0,  1226,  1819, -1671,    26,     0,     0,  1213,  1835, -1644,    26,     0 ],
            [    0,   920,  1364, -1253,    20,     0,     0,   910,  1376, -1233,    20,     0 ],
            [    0,   613,   909,  -835,    13,     0,     0,   606,   917,  -822,    13,     0 ],
            [    0,   306,   454,  -417,     6,     0,     0,   303,   458,  -411,     6,     0 ],
            [    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ]
        ])

        self.RIGHT_TURN = action([
            [    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ],
            [ -330,  -148,  -330,  -180,   400,  -340,   340,     0,     0,     0,   200,   256 ],
            [ -660,  -296,  -660,  -360,   800,  -680,   680,     0,     0,     0,   400,   512 ],
            [ -991,  -444,  -991,  -540,  1200, -1019,  1019,     0,     0,     0,   600,   768 ],
            [-1321,  -593, -1321,  -720,  1600, -1360,  1360,     0,     0,     0,   800,  1024 ],
            [-1651,  -741, -1651,  -900,  2000, -1700,  1700,     0,     0,     0,  1000,  1280 ],
            [-2022,  -741, -1701,  -560,  1839, -1739,  1920,   -20,     0,   460,  1320,  1544 ],
            [-2393,  -741, -1751,  -219,  1680, -1780,  2140,   -40,     0,   920,  1639,  1808 ],
            [-2764,  -741, -1800,   119,  1520, -1820,  2360,   -60,     0,  1380,  1960,  2072 ],
            [-3134,  -741, -1850,   460,  1360, -1860,  2580,   -80,     0,  1840,  2280,  2336 ],
            [-3505,  -741, -1900,   800,  1200, -1900,  2800,  -100,     0,  2300,  2600,  2600 ],
            [-3377,  -573, -1880,   480,  1140, -2039,  2520,   580,   220,  1760,  3000,  2420 ],
            [-3249,  -404, -1860,   159,  1080, -2180,  2240,  1260,   440,  1220,  3400,  2240 ],
            [-3121,  -235, -1839,  -159,  1019, -2320,  1960,  1939,   660,   680,  3800,  2060 ],
            [-2993,   -67, -1820,  -480,   960, -2460,  1679,  2620,   880,   139,  4200,  1880 ],
            [-2865,   101, -1800,  -800,   900, -2600,  1400,  3300,  1100,  -400,  4600,  1700 ],
            [-2651,  -299, -1800,  -577,  1202, -2600,  1328,  3193,  1100,  -400,  4444,  1700 ],
            [-2437,  -700, -1800,  -354,  1505, -2600,  1257,  3086,  1100,  -400,  4288,  1700 ],
            [-2223, -1101, -1800,  -131,  1808, -2600,  1186,  2979,  1100,  -400,  4132,  1700 ],
            [-1953, -1344, -1710,    40,  1943, -2470,  1073,  2750,  1045,  -380,  3809,  1614 ],
            [-1542, -1061, -1350,    32,  1534, -1950,   847,  2171,   825,  -300,  3007,  1275 ],
            [-1130,  -778,  -990,    23,  1125, -1430,   621,  1592,   605,  -220,  2205,   935 ],
            [ -719,  -495,  -629,    14,   716,  -909,   395,  1013,   385,  -140,  1403,   594 ],
            [ -308,  -212,  -270,     6,   306,  -390,   169,   434,   165,   -60,   601,   255 ]
        ])

        self.LEFT_TURN = action([row[-6:] + row[:6] for row in self.RIGHT_TURN.frames])

        self.GET_UP = action([
            [    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ],
            [ -187,  1200,  1200, -1200, -1200,     0,    20,  1200,  1200, -1200, -1200,     0 ],
            [ -374,  2400,  2400, -2400, -2400,     0,    40,  2400,  2400, -2400, -2400,     0 ],
            [ -561,  3600,  3600, -3600, -3600,     0,    60,  3600,  3600, -3600, -3600,     0 ],
            [ -748,  4800,  4800, -4800, -4800,     0,    80,  4800,  4800, -4800, -4800,     0 ],
            [ -935,  6000,  6000, -6000, -6000,     0,   100,  6000,  6000, -6000, -6000,     0 ],
            [ -729,  6000,  6000, -6000, -6000,  1200,    80,  6000,  6000, -6000, -6000,  1200 ],
            [ -522,  6000,  6000, -6000, -6000,  2400,    60,  6000,  6000, -6000, -6000,  2400 ],
            [ -316,  6000,  6000, -6000, -6000,  3600,    40,  6000,  6000, -6000, -6000,  3600 ],
            [ -109,  6000,  6000, -6000, -6000,  4800,    19,  6000,  6000, -6000, -6000,  4800 ],
            [   96,  6000,  6000, -6000, -6000,  6000,     0,  6000,  6000, -6000, -6000,  6000 ],
            [   96,  3600,  6000, -6000, -6000,  6000,     0,  3600,  6000, -6000, -6000,  6000 ],
            [   96,  1200,  6000, -6000, -6000,  6000,     0,  1200,  6000, -6000, -6000,  6000 ],
            [   96, -1200,  6000, -6000, -6000,  6000,     0, -1200,  6000, -6000, -6000,  6000 ],
            [   96, -3600,  6000, -6000, -6000,  6000,     0, -3600,  6000, -6000, -6000,  6000 ],
            [   96, -6000,  6000, -6000, -6000,  6000,     0, -6000,  6000, -6000, -6000,  6000 ],
            [   96, -5703,  6000, -6000, -6000,  4800,     0, -5700,  6000, -6000, -6000,  4800 ],
            [   96, -5406,  6000, -6000, -6000,  3600,     0, -5400,  6000, -6000, -6000,  3600 ],
            [   96, -5109,  6000, -6000, -6000,  2400,     0, -5100,  6000, -6000, -6000,  2400 ],
            [   96, -4812,  6000, -6000, -6000,  1200,     0, -4800,  6000, -6000, -6000,  1200 ],
            [   96, -4516,  6000, -6000, -6000,     0,     0, -4500,  6000, -6000, -6000,     0 ],
            [   96, -3412,  6000, -6000, -3600,     0,     0, -3400,  6000, -6000, -3600,     0 ],
            [   96, -2309,  6000, -6000, -1200,     0,     0, -2300,  6000, -6000, -1200,     0 ],
            [   96, -1206,  6000, -6000,  1200,     0,     0, -1200,  6000, -6000,  1200,     0 ],
            [   96,  -103,  6000, -6000,  3600,     0,     0,  -100,  6000, -6000,  3600,     0 ],
            [   96,  1000,  6000, -6000,  6000,     0,     0,  1000,  6000, -6000,  6000,     0 ],
            [   96,  2000,  6000, -6000,  6000,     0,     0,  2000,  6000, -6000,  6000,     0 ],
            [   96,  3000,  6000, -6000,  6000,     0,     0,  3000,  6000, -6000,  6000,     0 ],
            [   96,  4000,  6000, -6000,  6000,     0,     0,  4000,  6000, -6000,  6000,     0 ],
            [   96,  5000,  6000, -6000,  6000,     0,     0,  5000,  6000, -6000,  6000,     0 ],
            [   96,  6000,  6000, -6000,  6000,     0,     0,  6000,  6000, -6000,  6000,     0 ],
            [   96,  6000,  6000, -6000,  4321,     0,     0,  6000,  6000, -6000,  4321,     0 ],
            [   96,  6000,  6000, -6000,  2642,     0,     0,  6000,  6000, -6000,  2642,     0 ],
            [   96,  6000,  6000, -6000,   963,     0,     0,  6000,  6000, -6000,   963,     0 ],
            [   96,  6000,  6000, -6000,  -715,     0,     0,  6000,  6000, -6000,  -715,     0 ],
            [   96,  6000,  6000, -6000, -2394,     0,     0,  6000,  6000, -6000, -2394,     0 ],
            [   96,  6000,  6000, -6000, -4073,     0,     0,  6000,  6000, -6000, -4073,     0 ],
            [   96,  6000,  6000, -6000, -5752,     0,     0,  6000,  6000, -6000, -5752,     0 ],
            [   76,  4739,  4739, -4739, -4739,     0,     0,  4739,  4739, -4739, -4739,     0 ],
            [   53,  3339,  3339, -3339, -3339,     0,     0,  3339,  3339, -3339, -3339,     0 ],
            [   31,  1938,  1938, -1938, -1938,     0,     0,  1938,  1938, -1938, -1938,     0 ],
            [    8,   538,   538,  -538,  -538,     0,     0,   538,   538,  -538,  -538,     0 ]
        ])

        self.STAY = action([
            [0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0]
        ])

        # end actions declaration ========== #
        # ================================== #

    def run(self, goal):
        if self.getAccel()[2] > -7:
            self.GET_UP.play(self.device)

        if goal == None:
            continue
        elif goal == 'end':
            break
        else:
            if self.goal == 'stay':
                self.STAY.play(self.device)
            elif self.goal == 'left':
                self.LEFT_TURN.play(self.device)
            elif self.goal == 'right':
                self.RIGHT_TURN.play(self.device)
            elif self.goal == 'forward':
                self.STEP.play(self.device)
            else:
                pass
        # ========================================= #

    def getDistance(self):
        return float(self.serial.readline())

    def getAcceleration(self):
        # calibration
        #       +9.8    -9.8
        # x -> 0x00F7, 0xFF07
        # y -> 0x00F8, 0xFEFB
        # z -> 0x00F7, 0xFF08

        # extra functions =================================== #
        def comp(x):
            return (x^0xFFFF) + 1

        def _map(x, a, b, c, d):
            return (x - a) * (d - c) / (b - a) + c
        # =================================================== #

        acc = [0, 0, 0]

        x0 = self.bus.read_byte_data(self.accelerometer, 0x32)
        x1 = self.bus.read_byte_data(self.accelerometer, 0x33)

        acc[0] = (x1 << 8) + x0

        y0 = self.bus.read_byte_data(self.accelerometer, 0x34)
        y1 = self.bus.read_byte_data(self.accelerometer, 0x35)

        acc[1] = (y1 << 8) + y0

        z0 = self.bus.read_byte_data(self.accelerometer, 0x36)
        z1 = self.bus.read_byte_data(self.accelerometer, 0x37)

        acc[2] = (z1 << 8) + y0

        cal = [(0x00F7, -0x00F9), (0x00F8, -0x0105), (0x00F7, -0x00F8)]

        for i in range(3):
            if acc[i] > 0xFFFF / 2 - 0.5:
                acc[i] = comp(acc[i]) * -1

            acc[i] = _map(acc[i], cal[i][1], cal[i][0], -9.8, 9.8)

        return acc


ROFI = rofi()

if __name__ == '__name__':
    rospy.init_node(ROFI.name, anonymous=False)
    rospy.Subscriber('/follower/goal', String, ROFI.run)
    rospy.spin()
