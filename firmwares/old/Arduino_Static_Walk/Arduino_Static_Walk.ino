

//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <Servo.h> 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int maximumServoShieldPosition = 2200;   // the maximum pulse duration for the servo shield (2ms pulse)
const int minimumServoShieldPosition = 800;   // the minimum pulse duration for the servo shield (1ms pulse)
const int numberOfServos             = 12;      // the number of servos
const int numberOfJoints             = 12;
const int numberOfFrames             = 84;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  The Action class collects information necessary to perform a sequence of movements.     
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Members
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:
    int             duration;      // Total duration of the action in milliseconds
    float           playbackTime;  // The playback time in milliseconds.
    unsigned long   lastTime;      // The playback time in milliseconds.
    int*            frames;        // Pointer to a two dimensional array containing the individual frames
    float           playbackSpeed; // The speed at which the action is played back (1 is realtime, 0.5 is half speed, 2.0 is twice realtime)

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Methods
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Action(int setDuration, void* setFrames)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
    frames            = (int*)setFrames;
    duration          = setDuration;
    playbackTime      = 0;
    playbackSpeed     = 1.0;
    lastTime          = 0;
  }  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void Update()
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {  
     // Get the current time.
     unsigned long currentTime = millis(); 
   
     // Update the playback time.
     playbackTime += (playbackSpeed * (float)(currentTime - lastTime));
     
     // Loop if the playback time is past the end of the action.
     if(playbackTime > duration)
       playbackTime = playbackTime - duration;
     
     // Remember the time.
     lastTime = currentTime;     
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void GetCurrentFrame(int* frame)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
      //update each servo
      int* sourceFrame = frames + ((int)playbackTime/30)*numberOfJoints;
      for (int joint = 0; joint < numberOfJoints; joint++)
        frame[joint] = sourceFrame[joint];    
  }

};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 
int frames[numberOfFrames][numberOfJoints] = {
                      {  707, -2393,     0,     0, -3100,  1400, -1800,     0,   800,     0,     0, -2300 },
                      {  964, -2340,     0,     0, -3100,  1555, -1938,     0,   800,     0,     0, -2300 },
                      { 1220, -2288,     0,     0, -3100,  1711, -2076,     0,   800,     0,     0, -2300 },
                      { 1477, -2235,     0,     0, -3100,  1867, -2215,     0,   800,     0,     0, -2300 },
                      { 1733, -2183,     0,     0, -3100,  2022, -2353,     0,   800,     0,     0, -2300 },
                      { 1990, -2130,     0,     0, -3100,  2178, -2491,     0,   800,     0,     0, -2300 },
                      { 2255, -2015,     0,     0, -3100,  2341, -2641,     0,   800,     0,     0, -2300 },
                      { 2530, -1694,     0,     0, -3100,  2517, -2817,     0,   800,     0,     0, -2300 },
                      { 2806, -1374,     0,     0, -3100,  2694, -2994,     0,   800,     0,     0, -2300 },
                      { 3081, -1054,     0,     0, -3100,  2871, -3171,     0,   800,     0,     0, -2300 },
                      { 3357,  -734,     0,     0, -3100,  3048, -3348,     0,   800,     0,     0, -2300 },
                      { 3192, -1276,  -692,   537, -2586,  3076, -3411,    71,   800,    35,  -143, -2228 },
                      { 2841, -2184, -1681,  1304, -1853,  3042, -3428,   173,   800,    86,  -347, -2126 },
                      { 2491, -3093, -2671,  2072, -1119,  3007, -3446,   276,   800,   138,  -552, -2023 },
                      { 2140, -4001, -3660,  2840,  -386,  2973, -3463,   378,   800,   189,  -757, -1921 },
                      { 1789, -4910, -4649,  3607,   347,  2939, -3480,   481,   800,   240,  -962, -1818 },
                      { 1439, -5818, -5639,  4375,  1080,  2905, -3497,   583,   800,   291, -1166, -1716 },
                      { 1382, -5477, -5187,  4437,  1412,  2875, -3487,   725,   987,   275, -1599, -1825 },
                      { 1382, -4891, -4452,  4362,  1667,  2845, -3472,   875,  1212,   244, -2080, -1975 },
                      { 1382, -4304, -3717,  4287,  1922,  2815, -3457,  1025,  1437,   214, -2560, -2125 },
                      { 1382, -3717, -2982,  4212,  2177,  2785, -3442,  1175,  1662,   185, -3040, -2275 },
                      { 1382, -3131, -2247,  4137,  2432,  2755, -3427,  1325,  1887,   154, -3520, -2425 },
                      { 1382, -2544, -1512,  4062,  2687,  2725, -3412,  1475,  2112,   125, -4000, -2575 },
                      { 1368, -1987,  -955,  3900,  2947,  2685, -3375,  1560,  2255,    97, -4317, -2717 },
                      { 1287, -1572, -1285,  3300,  3232,  2595, -3225,  1320,  1985,    82, -3822, -2822 },
                      { 1206, -1157, -1614,  2700,  3517,  2505, -3075,  1080,  1714,    67, -3327, -2927 },
                      { 1125,  -743, -1945,  2100,  3802,  2415, -2925,   840,  1445,    52, -2832, -3032 },
                      { 1044,  -328, -2275,  1500,  4087,  2325, -2775,   600,  1175,    37, -2337, -3137 },
                      {  964,    85, -2605,   900,  4372,  2235, -2625,   359,   904,    22, -1842, -3242 },
                      {  883,   500, -2935,   300,  4657,  2145, -2475,   119,   634,     7, -1347, -3347 },
                      {  776,   616, -3062,    60,  4725,  1957, -2310,   -67,   567,     0, -1160, -3287 },
                      {  645,   434, -2987,   180,  4575,  1672, -2130,  -202,   702,     0, -1280, -3062 },
                      {  514,   252, -2912,   300,  4425,  1387, -1950,  -337,   837,     0, -1400, -2837 },
                      {  382,    70, -2837,   420,  4275,  1102, -1770,  -472,   972,     0, -1520, -2612 },
                      {  251,  -111, -2762,   540,  4125,   817, -1589,  -607,  1107,     0, -1639, -2387 },
                      {  119,  -293, -2687,   660,  3975,   532, -1410,  -742,  1242,     0, -1760, -2162 },
                      {  -11,  -475, -2612,   780,  3825,   247, -1230,  -877,  1377,     0, -1880, -1937 },
                      { -299,  -429, -2088,   679,  3228,  -175,  -913, -1124,  1189,     0, -2080, -1403 },
                      { -617,  -338, -1475,   535,  2543,  -626,  -568, -1393,   936,     0, -2296,  -808 },
                      { -936,  -247,  -862,   391,  1857, -1077,  -224, -1663,   684,     0, -2513,  -213 },
                      {-1255,  -155,  -248,   246,  1172, -1528,   119, -1932,   431,     0, -2729,   382 },
                      {-1573,   -64,   364,   102,   486, -1979,   463, -2202,   179,     0, -2946,   977 },
                      {-1841,     0,   800,     0,     0, -2300,   784, -2377,     0,     0, -3100,  1446 },
                      {-1979,     0,   800,     0,     0, -2300,  1041, -2325,     0,     0, -3100,  1602 },
                      {-2118,     0,   800,     0,     0, -2300,  1297, -2272,     0,     0, -3100,  1758 },
                      {-2256,     0,   800,     0,     0, -2300,  1554, -2220,     0,     0, -3100,  1913 },
                      {-2394,     0,   800,     0,     0, -2300,  1810, -2167,     0,     0, -3100,  2069 },
                      {-2533,     0,   800,     0,     0, -2300,  2067, -2115,     0,     0, -3100,  2225 },
                      {-2694,     0,   800,     0,     0, -2300,  2337, -1919,     0,     0, -3100,  2394 },
                      {-2871,     0,   800,     0,     0, -2300,  2613, -1598,     0,     0, -3100,  2571 },
                      {-3047,     0,   800,     0,     0, -2300,  2889, -1278,     0,     0, -3100,  2747 },
                      {-3224,     0,   800,     0,     0, -2300,  3164,  -958,     0,     0, -3100,  2924 },
                      {-3400,     0,   800,     0,     0, -2300,  3438,  -640,     0,     0, -3100,  3100 },
                      {-3417,   102,   800,    51,  -204, -2197,  3087, -1548,  -989,   767, -2366,  3065 },
                      {-3434,   204,   800,   102,  -409, -2095,  2736, -2457, -1978,  1535, -1633,  3031 },
                      {-3451,   307,   800,   153,  -614, -1992,  2386, -3365, -2967,  2302,  -899,  2997 },
                      {-3468,   409,   800,   204,  -818, -1890,  2035, -4274, -3957,  3070,  -166,  2963 },
                      {-3485,   511,   800,   255, -1023, -1788,  1684, -5182, -4946,  3837,   567,  2929 },
                      {-3497,   620,   830,   296, -1264, -1720,  1382, -5888, -5702,  4490,  1234,  2896 },
                      {-3483,   770,  1055,   266, -1744, -1870,  1382, -5301, -4967,  4415,  1489,  2866 },
                      {-3468,   919,  1280,   236, -2224, -2020,  1382, -4715, -4232,  4340,  1744,  2836 },
                      {-3453,  1070,  1505,   206, -2704, -2170,  1382, -4128, -3497,  4265,  1998,  2806 },
                      {-3438,  1220,  1730,   176, -3184, -2320,  1382, -3542, -2762,  4190,  2254,  2776 },
                      {-3422,  1370,  1955,   146, -3664, -2470,  1382, -2955, -2026,  4115,  2509,  2746 },
                      {-3408,  1520,  2180,   115, -4144, -2620,  1382, -2368, -1291,  4040,  2764,  2716 },
                      {-3329,  1488,  2174,    93, -4169, -2749,  1344, -1862, -1054,  3719,  3033,  2658 },
                      {-3179,  1247,  1903,    77, -3673, -2854,  1263, -1448, -1384,  3119,  3318,  2568 },
                      {-3029,  1007,  1633,    62, -3178, -2959,  1182, -1033, -1714,  2519,  3603,  2477 },
                      {-2879,   767,  1363,    47, -2683, -3064,  1101,  -618, -2044,  1919,  3888,  2387 },
                      {-2730,   528,  1094,    33, -2189, -3169,  1020,  -204, -2373,  1320,  4172,  2298 },
                      {-2580,   288,   824,    18, -1694, -3273,   939,   210, -2703,   720,  4458,  2208 },
                      {-2430,    48,   553,     3, -1199, -3379,   858,   624, -3034,   120,  4743,  2118 },
                      {-2256,  -108,   608,     0, -1196, -3220,   737,   562, -3040,    96,  4680,  1872 },
                      {-2076,  -243,   743,     0, -1316, -2995,   606,   380, -2965,   216,  4530,  1587 },
                      {-1896,  -378,   877,     0, -1436, -2770,   474,   198, -2890,   336,  4380,  1302 },
                      {-1716,  -513,  1012,     0, -1555, -2545,   343,    16, -2815,   455,  4230,  1017 },
                      {-1536,  -648,  1148,     0, -1675, -2320,   211,  -165, -2740,   576,  4079,   732 },
                      {-1356,  -783,  1283,     0, -1796, -2095,    80,  -347, -2665,   696,  3929,   446 },
                      {-1154,  -935,  1366,     0, -1928, -1820,   -76,  -493, -2518,   780,  3708,   139 },
                      { -809, -1205,  1113,     0, -2145, -1225,  -394,  -402, -1904,   636,  3023,  -311 },
                      { -465, -1474,   861,     0, -2361,  -629,  -713,  -311, -1291,   492,  2337,  -762 },
                      { -121, -1744,   608,     0, -2578,   -34, -1032,  -219,  -678,   347,  1651, -1213 },
                      {  222, -2013,   356,     0, -2794,   560, -1350,  -128,   -64,   203,   966, -1664 },
                      {  566, -2282,   103,     0, -3011,  1156, -1669,   -37,   548,    59,   280, -2115 }
};

int servoCalibrations[numberOfJoints][3] = {
                      {928, 600, 100}, 
                      {-699, -579, -800}, 
                      {-800, -1000, -1400}, 
                      {100, 500, -100}, 
                      {100, -100, -900}, 
                      {600, 0, -700}, 
                      {-100, -400, -800}, 
                      {100, -200, -700}, 
                      {-100, -900, -1300}, 
                      {400, -261, -200}, 
                      {1000, 600, 200}, 
                      {100, -600, -1400}
};
                      
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Action myAction(numberOfFrames * 30 , frames); //the action
Action* currentAction;                //pointer to the current action

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // Set the initial action.
  currentAction = &myAction;
  
  // Wait for a second to begin (keeps the communication line open in case a new program is being downloaded).
  delay(1000);    
  
  // Start up the communication.
  Serial.begin(9600);  
  
  // Initialize the servos.
  InitializeServos();
  
  // Apply the servo calibrations to the joint positions.
  ApplyCalibration();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // This is the main update loop for the microcontroller.
  
  // Update the current action.
  UpdateAction();
  
  // Get the frame from the current action.
  int frame[numberOfServos];
  currentAction->GetCurrentFrame(frame);
  
  // Aet the servo positions for this frame number.
  SetServoPositions(frame);        
  
  // Add a little delay.
  delay(2);                  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void UpdateAction()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // Check to see if the robot is performing the current action.
  if(currentAction == &myAction)
  {
    // TODO (you) : add some logic for your action here!
    
    // Move to the next frame of the action.
    currentAction->Update();    
  }  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ApplyCalibration()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Apply the servo calibrations to each frame of the animation.
  // This is done before hand to keep from slowing down the playback.
  // The frames could also be stored with the calibrations already
  // applied, however leaving the calibration seperate allows other
  // ROFIs to use this same action with their own calibration.
  for(int f = 0; f < numberOfFrames; f++)
    for(int s = 0; s < numberOfServos; s++)    
      frames[f][s] = CorrectJointAngle(frames[f][s], s);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double CorrectJointAngle(double inputAngle, int servo)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // The input angle is what the angle should be.
  // The corrected angle is the angle that has to be sent to the servo to achieve the input angle.
  if (inputAngle > 0)
    // Do a two point calibration between the middle and high corrected values.
    return map(inputAngle, 0, 4500, 0 + servoCalibrations[servo][1], 4500 + servoCalibrations[servo][2]);
  else
    // Do a two point calibration between the low and middle corrected values.
    return map(inputAngle, -4500, 0, -4500 + servoCalibrations[servo][0], 0 + servoCalibrations[servo][1]);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void InitializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);  
  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetServoPositions(int* frame)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // Update each servo.
  for (int servo = 0; servo < numberOfServos; servo++)
  {   
      // Each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
      // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
      // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
      // Also remember that the servos have a range of 120 degrees. The angle is written in positions
      // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees).
          
      int value = frame[servo];      
      
      // Flip for the left leg.
      if(servo >= numberOfServos/2)
        value = map(value, -6000,6000,6000,-6000);
      
      servos[servo].write(map(value, -6000,6000,800,2200));              // tell servo to go to position in variable 'pos'       

  }
}
