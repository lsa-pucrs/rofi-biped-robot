

//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <Servo.h> 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int echoPin  = 7; //g
const int trigPin =  8;  //g
const int maximumServoShieldPosition = 2200;   // the maximum pulse duration for the servo shield (2ms pulse)
const int minimumServoShieldPosition = 800;   // the minimum pulse duration for the servo shield (1ms pulse)
const int numberOfServos             = 12;      // the number of servos
const int numberOfJoints             = 12;
String currentActionName = "";                //idicates the current action
int cont;
boolean playbackPlaying;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 
int walk[39][numberOfJoints] = { //g frames[numberOfFrames][numberOfJoints]
                      {  707, -2393,     0,     0, -3100,  1800, -1800,     0,   800,     0,     0, -2300 },
                      { 1990, -2130,     0,     0, -3100,  2664, -2578,     0,   800,     0,     0, -2300 },
                      { 2497, -2234, -2771,  2867,  1248,  2847, -2604,     0,   800,     0,  -573, -1917 },
                      { 2812, -2367, -5772,  5915,  5980,  2894, -2500,     0,   784,     0, -1190, -1507 },
                      { 2618, -2109, -5499,  5068,  5789,  2839, -2500,     0,   634,     0, -1094, -1581 },
                      { 2425, -1852, -5226,  4222,  5598,  2785, -2500,     0,   484,     0,  -999, -1655 },
                      { 2232, -1594, -4953,  3376,  5407,  2730, -2500,     0,   334,     0,  -903, -1729 },
                      { 2039, -1336, -4680,  2529,  5216,  2676, -2500,     0,   184,     0,  -808, -1803 },
                      { 1845, -1078, -4407,  1683,  5025,  2621, -2500,     0,    34,     0,  -712, -1877 },
                      { 1652,  -821, -4134,   836,  4834,  2566, -2500,     0,  -116,     0,  -617, -1951 },
                      { 1459,  -563, -3861,    -9,  4642,  2512, -2500,     0,  -266,     0,  -521, -2026 },
                      { 1370, -1976, -2600,     0,  1551,  2064, -2574,     0,  1400,     0, -4043, -1589 },
                      { 1113,  -472, -2600,     0,  4383,  1381, -2074,     0,  1400,     0, -1100, -1396 },
                      {  462,  -482, -2620,     0,  4047,  1008, -1567,     0,  1416,     0, -1115, -1316 },
                      { -188,  -493, -2640,     0,  3711,   635, -1060,     0,  1431,     0, -1129, -1237 },
                      { -839,  -503, -2659,     0,  3375,   262,  -553,     0,  1446,     0, -1143, -1158 },
                      {-1118,  -402, -1955,     0,  2643,  -308,  -231,  -488,  1153,     0, -1545,  -544 },
                      {-1324,  -280, -1123,     0,  1845,  -909,    52, -1063,   805,     0, -2014,   163 },
                      {-1530,  -159,  -291,     0,  1047, -1510,   335, -1638,   457,     0, -2483,   871 },
                      {-1735,   -37,   539,     0,   249, -2112,   619, -2213,   108,     0, -2953,  1578 },
                      {-2306,     0,   800,     0,     0, -2300,  1541, -2222,     0,     0, -3100,  2362 },
                      {-2643,     0,   800,     0,  -337, -2075,  2371, -2175, -1630,  1686,  -542,  2828 },
                      {-2531,     0,   800,     0, -1011, -1625,  2731, -2345, -4891,  5059,  4573,  2884 },
                      {-2500,     0,   687,     0, -1128, -1555,  2686, -2199, -5595,  5365,  5856,  2859 },
                      {-2500,     0,   537,     0, -1032, -1629,  2493, -1942, -5322,  4518,  5665,  2804 },
                      {-2500,     0,   387,     0,  -937, -1703,  2299, -1684, -5049,  3672,  5474,  2749 },
                      {-2500,     0,   236,     0,  -841, -1777,  2106, -1426, -4776,  2825,  5283,  2695 },
                      {-2500,     0,    86,     0,  -746, -1851,  1913, -1169, -4503,  1979,  5092,  2640 },
                      {-2500,     0,   -63,     0,  -650, -1926,  1720,  -911, -4229,  1132,  4900,  2585 },
                      {-2500,     0,  -213,     0,  -554, -2000,  1526,  -653, -3956,   286,  4709,  2531 },
                      {-2555,     0,   635,     0, -2536, -1798,  1397, -1359, -3139,   -89,  2838,  2279 },
                      {-2246,     0,  1400,     0, -2011, -1458,  1215,  -937, -2600,     0,  3518,  1605 },
                      {-1745,     0,  1410,     0, -1110, -1344,   690,  -479, -2613,     0,  4164,  1138 },
                      {-1237,     0,  1426,     0, -1124, -1265,    39,  -489, -2633,     0,  3828,   765 },
                      { -730,     0,  1441,     0, -1138, -1186,  -611,  -500, -2652,     0,  3492,   392 },
                      { -330,  -287,  1275,     0, -1380,  -792, -1046,  -444, -2246,     0,  2922,   -98 },
                      {  -46,  -862,   927,     0, -1850,   -84, -1252,  -323, -1415,     0,  2124,  -699 },
                      {  236, -1437,   578,     0, -2319,   623, -1458,  -201,  -583,     0,  1326, -1300 },
                      {  520, -2012,   230,     0, -2788,  1331, -1663,   -80,   248,     0,   528, -1901 }
};

int rightTurn[24][numberOfJoints] = {
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      { -330,  -148,  -330,  -180,   400,  -340,   340,     0,     0,     0,   200,   256 },
                      { -660,  -296,  -660,  -360,   800,  -680,   680,     0,     0,     0,   400,   512 },
                      { -991,  -444,  -991,  -540,  1200, -1019,  1019,     0,     0,     0,   600,   768 },
                      {-1321,  -593, -1321,  -720,  1600, -1360,  1360,     0,     0,     0,   800,  1024 },
                      {-1651,  -741, -1651,  -900,  2000, -1700,  1700,     0,     0,     0,  1000,  1280 },
                      {-2022,  -741, -1701,  -560,  1839, -1739,  1920,   -20,     0,   460,  1320,  1544 },
                      {-2393,  -741, -1751,  -219,  1680, -1780,  2140,   -40,     0,   920,  1639,  1808 },
                      {-2764,  -741, -1800,   119,  1520, -1820,  2360,   -60,     0,  1380,  1960,  2072 },
                      {-3134,  -741, -1850,   460,  1360, -1860,  2580,   -80,     0,  1840,  2280,  2336 },
                      {-3505,  -741, -1900,   800,  1200, -1900,  2800,  -100,     0,  2300,  2600,  2600 },
                      {-3377,  -573, -1880,   480,  1140, -2039,  2520,   580,   220,  1760,  3000,  2420 },
                      {-3249,  -404, -1860,   159,  1080, -2180,  2240,  1260,   440,  1220,  3400,  2240 },
                      {-3121,  -235, -1839,  -159,  1019, -2320,  1960,  1939,   660,   680,  3800,  2060 },
                      {-2993,   -67, -1820,  -480,   960, -2460,  1679,  2620,   880,   139,  4200,  1880 },
                      {-2865,   101, -1800,  -800,   900, -2600,  1400,  3300,  1100,  -400,  4600,  1700 },
                      {-2651,  -299, -1800,  -577,  1202, -2600,  1328,  3193,  1100,  -400,  4444,  1700 },
                      {-2437,  -700, -1800,  -354,  1505, -2600,  1257,  3086,  1100,  -400,  4288,  1700 },
                      {-2223, -1101, -1800,  -131,  1808, -2600,  1186,  2979,  1100,  -400,  4132,  1700 },
                      {-1953, -1344, -1710,    40,  1943, -2470,  1073,  2750,  1045,  -380,  3809,  1614 },
                      {-1542, -1061, -1350,    32,  1534, -1950,   847,  2171,   825,  -300,  3007,  1275 },
                      {-1130,  -778,  -990,    23,  1125, -1430,   621,  1592,   605,  -220,  2205,   935 },
                      { -719,  -495,  -629,    14,   716,  -909,   395,  1013,   385,  -140,  1403,   594 },
                      { -308,  -212,  -270,     6,   306,  -390,   169,   434,   165,   -60,   601,   255 }
};

int lookDown[30][numberOfJoints] = {
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      {    0,     0,    70,  -417,     6,     0,     0,     0,     0,  -411,     6,     0 },
                      {    0,     0,   141,  -835,    13,     0,     0,     0,     0,  -822,    13,     0 },
                      {    0,     0,   212, -1253,    20,     0,     0,     0,     0, -1233,    20,     0 },
                      {    0,     0,   282, -1671,    26,     0,     0,     0,     0, -1644,    26,     0 },
                      {    0,     0,   353, -2089,    33,     0,     0,     0,     0, -2056,    33,     0 },
                      {    0,     0,   424, -2507,    40,     0,     0,     0,     0, -2467,    40,     0 },
                      {    0,     0,   494, -2925,    47,     0,     0,     0,     0, -2878,    47,     0 },
                      {    0,     0,   565, -3343,    53,     0,     0,     0,     0, -3289,    53,     0 },
                      {    0,     0,   636, -3761,    60,     0,     0,     0,     0, -3701,    60,     0 },
                      {    0,     0,   706, -4179,    67,     0,     0,     0,     0, -4112,    67,     0 },
                      {    0,   306,  1091, -4179,    67,     0,     0,   303,   458, -4112,    67,     0 },
                      {    0,   613,  1475, -4179,    67,     0,     0,   606,   917, -4112,    67,     0 },
                      {    0,   920,  1859, -4179,    67,     0,     0,   910,  1376, -4112,    67,     0 },
                      {    0,  1226,  2243, -4179,    67,     0,     0,  1213,  1835, -4112,    67,     0 },
                      {    0,  1533,  2628, -4179,    67,     0,     0,  1516,  2293, -4112,    67,     0 },
                      {    0,  1840,  3012, -4179,    67,     0,     0,  1820,  2752, -4112,    67,     0 },
                      {    0,  2147,  3396, -4179,    67,     0,     0,  2123,  3211, -4112,    67,     0 },
                      {    0,  2453,  3780, -4179,    67,     0,     0,  2426,  3670, -4112,    67,     0 },
                      {    0,  2760,  4165, -4179,    67,     0,     0,  2730,  4128, -4112,    67,     0 },
                      {    0,  3067,  4549, -4179,    67,     0,     0,  3033,  4587, -4112,    67,     0 },
                      {    0,  2760,  4094, -3761,    60,     0,     0,  2730,  4128, -3701,    60,     0 },
                      {    0,  2453,  3639, -3343,    53,     0,     0,  2426,  3670, -3289,    53,     0 },
                      {    0,  2147,  3184, -2925,    47,     0,     0,  2123,  3211, -2878,    47,     0 },
                      {    0,  1840,  2729, -2507,    40,     0,     0,  1820,  2752, -2467,    40,     0 },
                      {    0,  1533,  2274, -2089,    33,     0,     0,  1516,  2293, -2056,    33,     0 },
                      {    0,  1226,  1819, -1671,    26,     0,     0,  1213,  1835, -1644,    26,     0 },
                      {    0,   920,  1364, -1253,    20,     0,     0,   910,  1376, -1233,    20,     0 },
                      {    0,   613,   909,  -835,    13,     0,     0,   606,   917,  -822,    13,     0 },
                      {    0,   306,   454,  -417,     6,     0,     0,   303,   458,  -411,     6,     0 }
};


int stand[5][numberOfJoints] = {
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 }
};

int servoCalibrations[numberOfJoints][3] = {
                      {7678, -23, -7003}, 
                      {2284, 234, -337}, 
                      {1900, -100, 300}, 
                      {1900, -100, 200}, 
                      {2000, -400, -1135}, 
                      {800, -600, -3100}, 
                      {7600, 700, -6000}, 
                      {2900, 1000, 500}, 
                      {1900, 200, 0}, 
                      {2200, 100, 300}, 
                      {2600, 600, 300}, 
                      {1700, -300, -2700}
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  The Action class collects information necessary to perform a sequence of movements.     
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Members
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:
    int             duration;      // Total duration of the action in milliseconds
    float           playbackTime;  // The playback time in milliseconds.
    unsigned long   lastTime;      // The playback time in milliseconds.
    int*            frames;        // Pointer to a two dimensional array containing the individual frames
    float           playbackSpeed; // The speed at which the action is played back (1 is realtime, 0.5 is half speed, 2.0 is twice realtime)
    boolean         playbackEnd;
    int frameCont;
    int testCont;
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Methods
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Action(int newDuration, void* newFrames)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
    frames            = (int*)newFrames;
    duration          = newDuration;
    playbackTime      = 0;
    playbackSpeed     = 0.57;
    lastTime          = 0;
    currentActionName = "stand";
  }  
    
  //g
  void setWalkAction(){
    frames            = (int*)walk;
    duration          = (39 * 20);
    playbackTime      = 0;
    playbackSpeed     = 0.57;
    //lastTime          = 0;
    currentActionName = "walk";
  }
  
  void setStandAction(){
    frames            = (int*)stand;
    duration          = (5 * 20);
    playbackTime      = 0;
    playbackSpeed     = 0.57;
    //lastTime          = 0;
    currentActionName = "stand";
  }
  
  void setRightTurnAction(){
    frames            = (int*)rightTurn;
    duration          = (24 * 20);
    playbackTime      = 0;
    playbackSpeed     = 0.22;
    //lastTime          = 0;
    currentActionName = "rightTurn";
  }
  
  void setLookDownAction(){
    frames            = (int*)lookDown;
    duration          = (30 * 20);
    playbackTime      = 0;
    playbackSpeed     = 0.57;
    //lastTime          = 0;
    currentActionName =  "lookDown";
  }
  //g#
  
  ///////////////////////////////////////g
  void setPlaybackSpeed(float newSpeed){//g
  ////////////////////////////////////////g
    playbackSpeed = newSpeed;
  }
  ///////////////////////////////////////g
  
  boolean playbackEndCheck(){
    return playbackEnd;
  }
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void Update()
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {  
     // Get the current time.
     unsigned long currentTime = millis(); 
   
     // Update the playback time.
     playbackTime += (playbackSpeed * (float)(currentTime - lastTime));
     
     // Loop if the playback time is past the end of the action.
     playbackEnd = false;
     if(playbackTime > duration){
       playbackTime = playbackTime - duration;
       playbackEnd = true; 
       //g#  
     }  
     
     // Remember the time.
     lastTime = currentTime; 
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void GetCurrentFrame(int* frame)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
      //update each servo
      int* sourceFrame = frames + ((int)playbackTime/20)*numberOfJoints;      
      for (int joint = 0; joint < numberOfJoints; joint++)
          frame[joint] = sourceFrame[joint]; 
  }

};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Action myAction(numberOfFrames * 20 , frames); //the action
//Action walkAction(39 * 20 , walk); 
Action standAction(5 * 20 , stand); 
//Action rightTurnAction(24 * 20 , rightTurn);
//Action lookDownAction(30 * 20 , lookDown);
Action* currentAction; 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //set the initial action
  //currentAction = &myAction; 
  currentAction = &standAction;//g
  playbackPlaying = true;
  //wait for a second to begin (keeps the communication line open in case a new program is being downloaded)
  delay(1000);    
  
  //start up the communication
  Serial.begin(9600);  
  
  
  //initialize the servos
  initializeServos();
  
  //g
  // Apply the servo calibrations to the joint positions.
  initializeActions();//g
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //this is the main update loop for the microcontroller
  
  //update the current action
  UpdateAction();
  
  //get the frame from the current action  
  int frame[numberOfServos];
  if(playbackPlaying)
    currentAction->GetCurrentFrame(frame); 
  
  //set the servo positions for this frame number
  SetServoPositions(frame);        
  
  // Add a little delay.
  delay(1);                  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void UpdateAction()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   // TODO (you) : add some logic for your action here!
   //check to see if the robot is standing
   unsigned int distance = MeasureDistance();
   //Serial.print("Distance: ");
   //Serial.println(distance);
   
  if(currentAction->playbackEndCheck()){ //avoid changes in the middle of an animation     
     ///////////// STAND
     if(currentActionName == "stand"){
       Serial.println(" STAND ");
       if(distance>20)currentAction->setWalkAction();
       else currentAction->Update();
     } 
  
    /////////////// WALK
    else if(currentActionName == "walk"){  
      Serial.println(" WALK ");
      if(distance<10)currentAction->setStandAction();
      else if(distance>10&&distance<30)currentAction->setRightTurnAction(); 
      else currentAction->Update();
    }   
    
    ////////////// RIGHT
    else if(currentActionName == "rightTurn"){
       Serial.println(" RIGHT");
       if(distance>40)currentAction->setStandAction(); 
       else currentAction->Update(); 
    }  
    
//    ////////////// LOOK
//    else if(currentActionName == "walk" && cont>=4){
//      currentAction->setLookDownAction(); 
//      if(cont>=5){
//        playbackPlaying = false;
//        if(cont>=100){
//          playbackPlaying = true;
//          cont=0;
//          currentAction->setStandAction(); 
//        }    
//        else cont++;
//      }
//      else{ 
//        cont++;
//       currentAction->Update(); 
//      }
//    }  
//    cont++;  
  }
  else currentAction->Update();
  Serial.println(cont);
  
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetServoPositions(int* frame)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //update each servo
  for (int servo = 0; servo < numberOfServos; servo++)
  {   
      // each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
      // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
      // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
      // Also remember that the servos have a range of 120 degrees. The angle is written in positions
      // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees)
          
      int value = frame[servo];      
      
      // flip for the left leg.
      if(servo >= numberOfServos/2)
        value = map(value, -6000,6000,6000,-6000);
      
      servos[servo].write(map(value, -6000,6000,800,2200));              // tell servo to go to position in variable 'pos'       

  }
}


//g
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeActions()//g
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  //And ApplyCalibration
  // Apply the servo calibrations to each frame of the animation.
  // This is done before hand to keep from slowing down the playback.
  // The frames could also be stored with the calibrations already
  // applied, however leaving the calibration seperate allows other
  // ROFIs to use this same action with their own calibration.
  
  
  //walk
  int numberOfFrames=39;
  for(int f = 0; f < numberOfFrames; f++)
    for(int s = 0; s < numberOfServos; s++)    
      walk[f][s] = CorrectJointAngle(walk[f][s], s);
     
  //stand
  numberOfFrames=5;
  for(int f = 0; f < numberOfFrames; f++)
    for(int s = 0; s < numberOfServos; s++)    
      stand[f][s] = CorrectJointAngle(stand[f][s], s); 
      
  //rightTurn
  numberOfFrames=24;
  for(int f = 0; f < numberOfFrames; f++)
    for(int s = 0; s < numberOfServos; s++)    
      rightTurn[f][s] = CorrectJointAngle(rightTurn[f][s], s); 
      
  //lookDown
  numberOfFrames=30;
  for(int f = 0; f < numberOfFrames; f++)
    for(int s = 0; s < numberOfServos; s++)    
      lookDown[f][s] = CorrectJointAngle(lookDown[f][s], s);
      
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double CorrectJointAngle(double inputAngle, int servo)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // The input angle is what the angle should be.
  // The corrected angle is the angle that has to be sent to the servo to achieve the input angle.
  if (inputAngle > 0)
    // Do a two point calibration between the middle and high corrected values.
    return map(inputAngle, 0, 4500, 0 + servoCalibrations[servo][1], 4500 + servoCalibrations[servo][2]);
  else
    // Do a two point calibration between the low and middle corrected values.
    return map(inputAngle, -4500, 0, -4500 + servoCalibrations[servo][0], 0 + servoCalibrations[servo][1]);
}
//#g

//g
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
long MeasureDistance()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //g
  int maximumRange = 200; // Maximum range needed
  int minimumRange = 0; // Minimum range needed
  long duration, distance; // Duration used to calculate distance
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  /* The following trigPin/echoPin cycle is used to determine the
  distance of the nearest object by bouncing soundwaves off of it. */ 
  digitalWrite(trigPin, LOW); 
  delayMicroseconds(2); 
  
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); 
   
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
   
  //Calculate the distance (in cm) based on the speed of sound.
  distance = duration/58.2; //g
   
  if (distance >= maximumRange || distance <= minimumRange){
  /* Send a negative number to computer to indicate "out of range" */
  Serial.println("-1");
  }
  else return distance;//g
}
//#g
